name: Build UI and Go App

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-[a-zA-Z0-9]+'
  pull_request:
    branches: [ main ]

jobs:
  build-frontend:
    name: Build frontend UI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install

      - name: Build frontend in standalone mode
        working-directory: frontend
        run: pnpm run build --mode standalone

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          if-no-files-found: error
          retention-days: 10

  build-go:
    name: Build Go backend
    needs: build-frontend
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: windows
            arch: amd64
            runner: ubuntu-latest
          - os: darwin
            arch: arm64
            runner: macos-latest
          - os: darwin
            arch: amd64
            runner: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: backend/mono/public

      - name: Download frontend build to Wails directory
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: backend/mono/frontend-build-wails/dist

      - name: Ensure public directory exists
        run: |
          mkdir -p backend/mono/frontend-build-wails/dist
          mkdir -p backend/mono/public

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install MinGW-w64 for Windows cross-compilation
        if: matrix.os == 'windows'
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Install Linux dependencies (AMD64)
        if: matrix.os == 'linux' && matrix.arch == 'amd64'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config

      - name: Setup ARM64 cross-compilation environment
        if: matrix.os == 'linux' && matrix.arch == 'arm64'
        run: |
          set -euo pipefail

          sudo dpkg --add-architecture arm64

          # 0) Disable everything we don't control (safe even if empty)
          sudo mkdir -p /etc/apt/disabled
          sudo mv /etc/apt/sources.list.d/* /etc/apt/disabled/ 2>/dev/null || true
          [ -f /etc/apt/sources.sources ] && sudo mv /etc/apt/sources.sources /etc/apt/disabled/ || true

          # 1) Replace /etc/apt/sources.list with clean amd64-only Ubuntu mirrors
          sudo tee /etc/apt/sources.list >/dev/null <<'EOF'
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-updates main restricted universe multiverse
          deb [arch=amd64] http://archive.ubuntu.com/ubuntu noble-backports main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu noble-security main restricted universe multiverse
          EOF

          # 2) Add arm64-only Ubuntu Ports
          sudo tee /etc/apt/sources.list.d/arm64-ports.list >/dev/null <<'EOF'
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-updates main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-backports main restricted universe multiverse
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports noble-security main restricted universe multiverse
          EOF

          # 3) Clean & refresh indexes
          sudo apt-get clean
          sudo rm -rf /var/lib/apt/lists/*
          sudo apt-get update

          
          # Install cross-compiler and build tools
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            pkg-config
          
          # Install ARM64 versions of the required libraries
          sudo apt-get install -y \
            libgtk-3-dev:arm64 \
            libwebkit2gtk-4.1-dev:arm64 \
            libayatana-appindicator3-dev:arm64 \
            librsvg2-dev:arm64

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Build Go backend - desktop app and server
        working-directory: backend
        run: |
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          export CGO_ENABLED=1
          
          # Use custom SQLite headers for all platforms to ensure version consistency
          export CGO_CFLAGS="-I$(pwd)/sqlite3"

          export BINARY_NAME_SERVER=sortedchat-server-${{ matrix.os }}-${{ matrix.arch }}
          export BINARY_NAME_APP=sortedchat-app-${{ matrix.os }}-${{ matrix.arch }}

          # Windows
          if [ "${{ matrix.os }}" = "windows" ]; then 
            export BINARY_NAME_SERVER="$BINARY_NAME_SERVER.exe";
            export BINARY_NAME_APP="$BINARY_NAME_APP.exe";
            export CC=x86_64-w64-mingw32-gcc
          fi

          # Linux ARM64 - Fix cross-compilation issues
          if [ "${{ matrix.os }}" = "linux" ] && [ "${{ matrix.arch }}" = "arm64" ]; then 
            export CC=aarch64-linux-gnu-gcc
            export CXX=aarch64-linux-gnu-g++
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig
            export CGO_CFLAGS="$CGO_CFLAGS -I/usr/include/aarch64-linux-gnu"
            export CGO_LDFLAGS="-L/usr/lib/aarch64-linux-gnu"
          fi

          # macOS builds don't need special CC settings
          if [ "${{ matrix.os }}" = "darwin" ]; then
            export CGO_ENABLED=1
            export CGO_CFLAGS="$CGO_CFLAGS -mmacosx-version-min=11.0"
            export CGO_LDFLAGS="-mmacosx-version-min=11.0 -framework UniformTypeIdentifiers"
          fi

          go env
          go build -buildvcs=false -tags "desktop,sqlite_fts5,webkit2_41,wv2runtime.download,production,devtools" -ldflags "-w -s" -o $BINARY_NAME_SERVER ./mono
          go build -buildvcs=false -tags "wails,desktop,sqlite_fts5,webkit2_41,wv2runtime.download,production,devtools" -ldflags "-w -s" -o $BINARY_NAME_APP ./mono

      - name: Upload server binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sortedchat-server-${{ matrix.os }}-${{ matrix.arch }}
          path: backend/sortedchat-server-${{ matrix.os }}-${{ matrix.arch }}*
          retention-days: 10

      - name: Upload app binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sortedchat-app-${{ matrix.os }}-${{ matrix.arch }}
          path: backend/sortedchat-app-${{ matrix.os }}-${{ matrix.arch }}*
          retention-days: 10

  build-docker:
    needs: build-go
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download pre-built Go binaries for both Linux architectures
      # These were built in the previous build-go job with cross-compilation
      - name: Download Linux AMD64 binary
        uses: actions/download-artifact@v4
        with:
          name: sortedchat-server-linux-amd64
          path: ./binaries/amd64/

      - name: Download Linux ARM64 binary
        uses: actions/download-artifact@v4
        with:
          name: sortedchat-server-linux-arm64
          path: ./binaries/arm64/

      # Set up Docker Buildx - this enables multi-platform builds
      # Buildx can build for multiple architectures simultaneously
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Check if this is a production release (not pre-release)
      - name: Check if production release
        id: check_prod
        run: |
          tag=${GITHUB_REF#refs/tags/}
          if [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_production=true" >> $GITHUB_OUTPUT
          else
            echo "is_production=false" >> $GITHUB_OUTPUT
          fi

      # Extract Docker tags and metadata from Git tags
      # Production releases (v1.2.3): get version tag + latest
      # RC releases (v1.2.3-rc1): get version tag only (no latest)
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/sortedchat
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ steps.check_prod.outputs.is_production }}

      # Create Dockerfile for multi-architecture build
      # Uses pre-built Go binaries instead of compiling in Docker (much faster!)
      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM ubuntu:24.04
          
          # Declare the TARGETARCH argument (automatically provided by Docker Buildx)
          ARG TARGETARCH
          
          # Install runtime dependencies
          RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*
          
          # 🔥 ARCHITECTURE SELECTION MAGIC:
          # $TARGETARCH is automatically set by Docker Buildx:
          # - When building linux/amd64: $TARGETARCH = "amd64"
          # - When building linux/arm64: $TARGETARCH = "arm64"
          # This ensures the correct binary is copied for each architecture
          # NOTE: Frontend is already built into the Go binary, no separate copy needed!
          COPY binaries/${TARGETARCH}/sortedchat-server-linux-${TARGETARCH} /usr/local/bin/sortedchat
          
          # Make the binary executable
          RUN chmod +x /usr/local/bin/sortedchat
          
          # Run the application
          CMD ["/usr/local/bin/sortedchat-server", "-server"]
          EOF

      # Build and push multi-architecture Docker image
      # 🎯 THE MAGIC: Docker Buildx builds SEPARATE images for each platform
      #    but pushes them under the SAME tag with a multi-arch manifest
      - name: Build and push multi-platform image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # ✨ MULTI-ARCH MAGIC: These platforms trigger separate builds
          #    - linux/amd64: Uses the AMD64 binary
          #    - linux/arm64: Uses the ARM64 binary
          #    Result: ONE tag that works on BOTH architectures!
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [build-go, build-docker]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if pre-release
        id: check_prerelease
        run: |
          tag=${GITHUB_REF#refs/tags/}
          if [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/sortedchat-*/*
          generate_release_notes: true
          body: |
            ## 🐳 Multi-Architecture Docker Image
            
            This release includes a **multi-architecture Docker image** that automatically works on both **AMD64** and **ARM64** platforms!
            
            ### Quick Start
            ```bash
            # Pull this specific version
            docker pull ghcr.io/${{ github.repository_owner }}/sortedchat:${{ github.ref_name }}
            
            # Run the container
            docker run -p 8080:8080 ghcr.io/${{ github.repository_owner }}/sortedchat:${{ github.ref_name }}
            ```
            
            ### Available Docker Tags
            - `ghcr.io/${{ github.repository_owner }}/sortedchat:${{ github.ref_name }}` - This specific version
            - `ghcr.io/${{ github.repository_owner }}/sortedchat:latest` - Latest stable release (production only)
            
            ### 🎯 How Multi-Arch Works
            - **One tag, multiple architectures**: The same tag works on both Intel/AMD (x64) and ARM (Apple Silicon, Raspberry Pi, etc.)
            - **Automatic selection**: Docker automatically downloads the right architecture for your machine
            - **No platform flags needed**: Just use `docker pull` normally!
            
            ### Platform Support
            - ✅ **linux/amd64** - Intel/AMD 64-bit (most servers, Intel Macs, Windows WSL)
            - ✅ **linux/arm64** - ARM 64-bit (Apple Silicon Macs, AWS Graviton, Raspberry Pi 4+)
            
            ### Verify Your Architecture
            ```bash
            docker run --rm ghcr.io/${{ github.repository_owner }}/sortedchat:${{ github.ref_name }} uname -m
            # Output: x86_64 (on AMD64) or aarch64 (on ARM64)
            ```
          draft: false
          prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}