/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.31.0
 * source: chatservice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export class ChatRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        text?: string;
        threadId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
            if ("threadId" in data && data.threadId != undefined) {
                this.threadId = data.threadId;
            }
        }
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get threadId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set threadId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        text?: string;
        threadId?: string;
    }): ChatRequest {
        const message = new ChatRequest({});
        if (data.text != null) {
            message.text = data.text;
        }
        if (data.threadId != null) {
            message.threadId = data.threadId;
        }
        return message;
    }
    toObject() {
        const data: {
            text?: string;
            threadId?: string;
        } = {};
        if (this.text != null) {
            data.text = this.text;
        }
        if (this.threadId != null) {
            data.threadId = this.threadId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.text.length)
            writer.writeString(1, this.text);
        if (this.threadId.length)
            writer.writeString(2, this.threadId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.text = reader.readString();
                    break;
                case 2:
                    message.threadId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatRequest {
        return ChatRequest.deserialize(bytes);
    }
}
export class ChatResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
        }
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        text?: string;
    }): ChatResponse {
        const message = new ChatResponse({});
        if (data.text != null) {
            message.text = data.text;
        }
        return message;
    }
    toObject() {
        const data: {
            text?: string;
        } = {};
        if (this.text != null) {
            data.text = this.text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.text.length)
            writer.writeString(1, this.text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatResponse {
        return ChatResponse.deserialize(bytes);
    }
}
export abstract class UnimplementedSortedChatService {
    static definition = {
        Chat: {
            path: "/sortedchat.SortedChat/Chat",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Chat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
}
export class SortedChatClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static Chat = new grpc_web_1.MethodDescriptor<ChatRequest, ChatResponse>("/sortedchat.SortedChat/Chat", grpc_web_1.MethodType.SERVER_STREAMING, ChatRequest, ChatResponse, (message: ChatRequest) => message.serialize(), ChatResponse.deserialize);
    Chat(message: ChatRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/sortedchat.SortedChat/Chat", message, metadata || {}, SortedChatClient.Chat);
    }
}
