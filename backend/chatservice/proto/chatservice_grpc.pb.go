// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: chatservice.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SortedChat_Chat_FullMethodName = "/sortedchat.SortedChat/Chat"
)

// SortedChatClient is the client API for SortedChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SortedChatClient interface {
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResponse], error)
}

type sortedChatClient struct {
	cc grpc.ClientConnInterface
}

func NewSortedChatClient(cc grpc.ClientConnInterface) SortedChatClient {
	return &sortedChatClient{cc}
}

func (c *sortedChatClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SortedChat_ServiceDesc.Streams[0], SortedChat_Chat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChatRequest, ChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SortedChat_ChatClient = grpc.ServerStreamingClient[ChatResponse]

// SortedChatServer is the server API for SortedChat service.
// All implementations must embed UnimplementedSortedChatServer
// for forward compatibility.
type SortedChatServer interface {
	Chat(*ChatRequest, grpc.ServerStreamingServer[ChatResponse]) error
	mustEmbedUnimplementedSortedChatServer()
}

// UnimplementedSortedChatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSortedChatServer struct{}

func (UnimplementedSortedChatServer) Chat(*ChatRequest, grpc.ServerStreamingServer[ChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedSortedChatServer) mustEmbedUnimplementedSortedChatServer() {}
func (UnimplementedSortedChatServer) testEmbeddedByValue()                    {}

// UnsafeSortedChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SortedChatServer will
// result in compilation errors.
type UnsafeSortedChatServer interface {
	mustEmbedUnimplementedSortedChatServer()
}

func RegisterSortedChatServer(s grpc.ServiceRegistrar, srv SortedChatServer) {
	// If the following call pancis, it indicates UnimplementedSortedChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SortedChat_ServiceDesc, srv)
}

func _SortedChat_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SortedChatServer).Chat(m, &grpc.GenericServerStream[ChatRequest, ChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SortedChat_ChatServer = grpc.ServerStreamingServer[ChatResponse]

// SortedChat_ServiceDesc is the grpc.ServiceDesc for SortedChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SortedChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sortedchat.SortedChat",
	HandlerType: (*SortedChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _SortedChat_Chat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chatservice.proto",
}
