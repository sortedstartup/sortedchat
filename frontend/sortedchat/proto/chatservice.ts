/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.31.0
 * source: chatservice.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export class CreateChatRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }): CreateChatRequest {
        const message = new CreateChatRequest({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateChatRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateChatRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateChatRequest {
        return CreateChatRequest.deserialize(bytes);
    }
}
export class CreateChatResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        message?: string;
        chat_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
            if ("chat_id" in data && data.chat_id != undefined) {
                this.chat_id = data.chat_id;
            }
        }
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get chat_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set chat_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        message?: string;
        chat_id?: string;
    }): CreateChatResponse {
        const message = new CreateChatResponse({});
        if (data.message != null) {
            message.message = data.message;
        }
        if (data.chat_id != null) {
            message.chat_id = data.chat_id;
        }
        return message;
    }
    toObject() {
        const data: {
            message?: string;
            chat_id?: string;
        } = {};
        if (this.message != null) {
            data.message = this.message;
        }
        if (this.chat_id != null) {
            data.chat_id = this.chat_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.message.length)
            writer.writeString(1, this.message);
        if (this.chat_id.length)
            writer.writeString(2, this.chat_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateChatResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateChatResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.message = reader.readString();
                    break;
                case 2:
                    message.chat_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateChatResponse {
        return CreateChatResponse.deserialize(bytes);
    }
}
export class ChatRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        text?: string;
        chatId?: string;
        model?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
            if ("chatId" in data && data.chatId != undefined) {
                this.chatId = data.chatId;
            }
            if ("model" in data && data.model != undefined) {
                this.model = data.model;
            }
        }
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get chatId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set chatId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get model() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set model(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        text?: string;
        chatId?: string;
        model?: string;
    }): ChatRequest {
        const message = new ChatRequest({});
        if (data.text != null) {
            message.text = data.text;
        }
        if (data.chatId != null) {
            message.chatId = data.chatId;
        }
        if (data.model != null) {
            message.model = data.model;
        }
        return message;
    }
    toObject() {
        const data: {
            text?: string;
            chatId?: string;
            model?: string;
        } = {};
        if (this.text != null) {
            data.text = this.text;
        }
        if (this.chatId != null) {
            data.chatId = this.chatId;
        }
        if (this.model != null) {
            data.model = this.model;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.text.length)
            writer.writeString(1, this.text);
        if (this.chatId.length)
            writer.writeString(2, this.chatId);
        if (this.model.length)
            writer.writeString(3, this.model);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.text = reader.readString();
                    break;
                case 2:
                    message.chatId = reader.readString();
                    break;
                case 3:
                    message.model = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatRequest {
        return ChatRequest.deserialize(bytes);
    }
}
export class ChatResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
        }
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set text(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        text?: string;
    }): ChatResponse {
        const message = new ChatResponse({});
        if (data.text != null) {
            message.text = data.text;
        }
        return message;
    }
    toObject() {
        const data: {
            text?: string;
        } = {};
        if (this.text != null) {
            data.text = this.text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.text.length)
            writer.writeString(1, this.text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatResponse {
        return ChatResponse.deserialize(bytes);
    }
}
export class GetHistoryRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        chatId?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("chatId" in data && data.chatId != undefined) {
                this.chatId = data.chatId;
            }
        }
    }
    get chatId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set chatId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        chatId?: string;
    }): GetHistoryRequest {
        const message = new GetHistoryRequest({});
        if (data.chatId != null) {
            message.chatId = data.chatId;
        }
        return message;
    }
    toObject() {
        const data: {
            chatId?: string;
        } = {};
        if (this.chatId != null) {
            data.chatId = this.chatId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.chatId.length)
            writer.writeString(1, this.chatId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHistoryRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHistoryRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.chatId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetHistoryRequest {
        return GetHistoryRequest.deserialize(bytes);
    }
}
export class GetHistoryResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        history?: ChatMessage[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("history" in data && data.history != undefined) {
                this.history = data.history;
            }
        }
    }
    get history() {
        return pb_1.Message.getRepeatedWrapperField(this, ChatMessage, 1) as ChatMessage[];
    }
    set history(value: ChatMessage[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        history?: ReturnType<typeof ChatMessage.prototype.toObject>[];
    }): GetHistoryResponse {
        const message = new GetHistoryResponse({});
        if (data.history != null) {
            message.history = data.history.map(item => ChatMessage.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            history?: ReturnType<typeof ChatMessage.prototype.toObject>[];
        } = {};
        if (this.history != null) {
            data.history = this.history.map((item: ChatMessage) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.history.length)
            writer.writeRepeatedMessage(1, this.history, (item: ChatMessage) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetHistoryResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetHistoryResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.history, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ChatMessage.deserialize(reader), ChatMessage));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetHistoryResponse {
        return GetHistoryResponse.deserialize(bytes);
    }
}
export class ChatMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        role?: string;
        content?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
        }
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set role(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set content(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        role?: string;
        content?: string;
    }): ChatMessage {
        const message = new ChatMessage({});
        if (data.role != null) {
            message.role = data.role;
        }
        if (data.content != null) {
            message.content = data.content;
        }
        return message;
    }
    toObject() {
        const data: {
            role?: string;
            content?: string;
        } = {};
        if (this.role != null) {
            data.role = this.role;
        }
        if (this.content != null) {
            data.content = this.content;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.role.length)
            writer.writeString(1, this.role);
        if (this.content.length)
            writer.writeString(2, this.content);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.role = reader.readString();
                    break;
                case 2:
                    message.content = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatMessage {
        return ChatMessage.deserialize(bytes);
    }
}
export class GetChatListRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): GetChatListRequest {
        const message = new GetChatListRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChatListRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChatListRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetChatListRequest {
        return GetChatListRequest.deserialize(bytes);
    }
}
export class GetChatListResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        chats?: ChatInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("chats" in data && data.chats != undefined) {
                this.chats = data.chats;
            }
        }
    }
    get chats() {
        return pb_1.Message.getRepeatedWrapperField(this, ChatInfo, 1) as ChatInfo[];
    }
    set chats(value: ChatInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        chats?: ReturnType<typeof ChatInfo.prototype.toObject>[];
    }): GetChatListResponse {
        const message = new GetChatListResponse({});
        if (data.chats != null) {
            message.chats = data.chats.map(item => ChatInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            chats?: ReturnType<typeof ChatInfo.prototype.toObject>[];
        } = {};
        if (this.chats != null) {
            data.chats = this.chats.map((item: ChatInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.chats.length)
            writer.writeRepeatedMessage(1, this.chats, (item: ChatInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetChatListResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetChatListResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.chats, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ChatInfo.deserialize(reader), ChatInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetChatListResponse {
        return GetChatListResponse.deserialize(bytes);
    }
}
export class ChatInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        chatId?: string;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("chatId" in data && data.chatId != undefined) {
                this.chatId = data.chatId;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get chatId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set chatId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        chatId?: string;
        name?: string;
    }): ChatInfo {
        const message = new ChatInfo({});
        if (data.chatId != null) {
            message.chatId = data.chatId;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            chatId?: string;
            name?: string;
        } = {};
        if (this.chatId != null) {
            data.chatId = this.chatId;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.chatId.length)
            writer.writeString(1, this.chatId);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.chatId = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatInfo {
        return ChatInfo.deserialize(bytes);
    }
}
export class ModelListInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        label?: string;
        provider?: string;
        url?: string;
        input_token_cost?: number;
        output_token_cost?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("label" in data && data.label != undefined) {
                this.label = data.label;
            }
            if ("provider" in data && data.provider != undefined) {
                this.provider = data.provider;
            }
            if ("url" in data && data.url != undefined) {
                this.url = data.url;
            }
            if ("input_token_cost" in data && data.input_token_cost != undefined) {
                this.input_token_cost = data.input_token_cost;
            }
            if ("output_token_cost" in data && data.output_token_cost != undefined) {
                this.output_token_cost = data.output_token_cost;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get label() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set label(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get provider() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set provider(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get url() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set url(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get input_token_cost() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set input_token_cost(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get output_token_cost() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set output_token_cost(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        id?: string;
        label?: string;
        provider?: string;
        url?: string;
        input_token_cost?: number;
        output_token_cost?: number;
    }): ModelListInfo {
        const message = new ModelListInfo({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.label != null) {
            message.label = data.label;
        }
        if (data.provider != null) {
            message.provider = data.provider;
        }
        if (data.url != null) {
            message.url = data.url;
        }
        if (data.input_token_cost != null) {
            message.input_token_cost = data.input_token_cost;
        }
        if (data.output_token_cost != null) {
            message.output_token_cost = data.output_token_cost;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            label?: string;
            provider?: string;
            url?: string;
            input_token_cost?: number;
            output_token_cost?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.label != null) {
            data.label = this.label;
        }
        if (this.provider != null) {
            data.provider = this.provider;
        }
        if (this.url != null) {
            data.url = this.url;
        }
        if (this.input_token_cost != null) {
            data.input_token_cost = this.input_token_cost;
        }
        if (this.output_token_cost != null) {
            data.output_token_cost = this.output_token_cost;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.label.length)
            writer.writeString(2, this.label);
        if (this.provider.length)
            writer.writeString(3, this.provider);
        if (this.url.length)
            writer.writeString(4, this.url);
        if (this.input_token_cost != 0)
            writer.writeFloat(5, this.input_token_cost);
        if (this.output_token_cost != 0)
            writer.writeFloat(6, this.output_token_cost);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ModelListInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModelListInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.label = reader.readString();
                    break;
                case 3:
                    message.provider = reader.readString();
                    break;
                case 4:
                    message.url = reader.readString();
                    break;
                case 5:
                    message.input_token_cost = reader.readFloat();
                    break;
                case 6:
                    message.output_token_cost = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ModelListInfo {
        return ModelListInfo.deserialize(bytes);
    }
}
export class ListModelsRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ListModelsRequest {
        const message = new ListModelsRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListModelsRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListModelsRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListModelsRequest {
        return ListModelsRequest.deserialize(bytes);
    }
}
export class ListModelsResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        models?: ModelListInfo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("models" in data && data.models != undefined) {
                this.models = data.models;
            }
        }
    }
    get models() {
        return pb_1.Message.getRepeatedWrapperField(this, ModelListInfo, 1) as ModelListInfo[];
    }
    set models(value: ModelListInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        models?: ReturnType<typeof ModelListInfo.prototype.toObject>[];
    }): ListModelsResponse {
        const message = new ListModelsResponse({});
        if (data.models != null) {
            message.models = data.models.map(item => ModelListInfo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            models?: ReturnType<typeof ModelListInfo.prototype.toObject>[];
        } = {};
        if (this.models != null) {
            data.models = this.models.map((item: ModelListInfo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.models.length)
            writer.writeRepeatedMessage(1, this.models, (item: ModelListInfo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListModelsResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListModelsResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.models, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ModelListInfo.deserialize(reader), ModelListInfo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListModelsResponse {
        return ListModelsResponse.deserialize(bytes);
    }
}
export class ChatSearchRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        query?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("query" in data && data.query != undefined) {
                this.query = data.query;
            }
        }
    }
    get query() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set query(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        query?: string;
    }): ChatSearchRequest {
        const message = new ChatSearchRequest({});
        if (data.query != null) {
            message.query = data.query;
        }
        return message;
    }
    toObject() {
        const data: {
            query?: string;
        } = {};
        if (this.query != null) {
            data.query = this.query;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.query.length)
            writer.writeString(1, this.query);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatSearchRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatSearchRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.query = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatSearchRequest {
        return ChatSearchRequest.deserialize(bytes);
    }
}
export class SearchResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        chat_name?: string;
        chat_id?: string;
        matched_text?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("chat_name" in data && data.chat_name != undefined) {
                this.chat_name = data.chat_name;
            }
            if ("chat_id" in data && data.chat_id != undefined) {
                this.chat_id = data.chat_id;
            }
            if ("matched_text" in data && data.matched_text != undefined) {
                this.matched_text = data.matched_text;
            }
        }
    }
    get chat_name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set chat_name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get chat_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set chat_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get matched_text() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set matched_text(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        chat_name?: string;
        chat_id?: string;
        matched_text?: string;
    }): SearchResult {
        const message = new SearchResult({});
        if (data.chat_name != null) {
            message.chat_name = data.chat_name;
        }
        if (data.chat_id != null) {
            message.chat_id = data.chat_id;
        }
        if (data.matched_text != null) {
            message.matched_text = data.matched_text;
        }
        return message;
    }
    toObject() {
        const data: {
            chat_name?: string;
            chat_id?: string;
            matched_text?: string;
        } = {};
        if (this.chat_name != null) {
            data.chat_name = this.chat_name;
        }
        if (this.chat_id != null) {
            data.chat_id = this.chat_id;
        }
        if (this.matched_text != null) {
            data.matched_text = this.matched_text;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.chat_name.length)
            writer.writeString(1, this.chat_name);
        if (this.chat_id.length)
            writer.writeString(2, this.chat_id);
        if (this.matched_text.length)
            writer.writeString(3, this.matched_text);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.chat_name = reader.readString();
                    break;
                case 2:
                    message.chat_id = reader.readString();
                    break;
                case 3:
                    message.matched_text = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchResult {
        return SearchResult.deserialize(bytes);
    }
}
export class ChatSearchResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        results?: SearchResult[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("results" in data && data.results != undefined) {
                this.results = data.results;
            }
        }
    }
    get results() {
        return pb_1.Message.getRepeatedWrapperField(this, SearchResult, 1) as SearchResult[];
    }
    set results(value: SearchResult[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        results?: ReturnType<typeof SearchResult.prototype.toObject>[];
    }): ChatSearchResponse {
        const message = new ChatSearchResponse({});
        if (data.results != null) {
            message.results = data.results.map(item => SearchResult.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            results?: ReturnType<typeof SearchResult.prototype.toObject>[];
        } = {};
        if (this.results != null) {
            data.results = this.results.map((item: SearchResult) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.results.length)
            writer.writeRepeatedMessage(1, this.results, (item: SearchResult) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatSearchResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatSearchResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.results, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SearchResult.deserialize(reader), SearchResult));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChatSearchResponse {
        return ChatSearchResponse.deserialize(bytes);
    }
}
export abstract class UnimplementedSortedChatService {
    static definition = {
        Chat: {
            path: "/sortedchat.SortedChat/Chat",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: ChatRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ChatRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ChatResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ChatResponse.deserialize(new Uint8Array(bytes))
        },
        GetHistory: {
            path: "/sortedchat.SortedChat/GetHistory",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetHistoryRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetHistoryRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetHistoryResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetHistoryResponse.deserialize(new Uint8Array(bytes))
        },
        GetChatList: {
            path: "/sortedchat.SortedChat/GetChatList",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: GetChatListRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => GetChatListRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: GetChatListResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => GetChatListResponse.deserialize(new Uint8Array(bytes))
        },
        CreateChat: {
            path: "/sortedchat.SortedChat/CreateChat",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateChatRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateChatRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateChatResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateChatResponse.deserialize(new Uint8Array(bytes))
        },
        ListModel: {
            path: "/sortedchat.SortedChat/ListModel",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListModelsRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListModelsRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ListModelsResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ListModelsResponse.deserialize(new Uint8Array(bytes))
        },
        SearchChat: {
            path: "/sortedchat.SortedChat/SearchChat",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ChatSearchRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ChatSearchRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ChatSearchResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ChatSearchResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Chat(call: grpc_1.ServerWritableStream<ChatRequest, ChatResponse>): void;
    abstract GetHistory(call: grpc_1.ServerUnaryCall<GetHistoryRequest, GetHistoryResponse>, callback: grpc_1.sendUnaryData<GetHistoryResponse>): void;
    abstract GetChatList(call: grpc_1.ServerUnaryCall<GetChatListRequest, GetChatListResponse>, callback: grpc_1.sendUnaryData<GetChatListResponse>): void;
    abstract CreateChat(call: grpc_1.ServerUnaryCall<CreateChatRequest, CreateChatResponse>, callback: grpc_1.sendUnaryData<CreateChatResponse>): void;
    abstract ListModel(call: grpc_1.ServerUnaryCall<ListModelsRequest, ListModelsResponse>, callback: grpc_1.sendUnaryData<ListModelsResponse>): void;
    abstract SearchChat(call: grpc_1.ServerUnaryCall<ChatSearchRequest, ChatSearchResponse>, callback: grpc_1.sendUnaryData<ChatSearchResponse>): void;
}
export class SortedChatClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static Chat = new grpc_web_1.MethodDescriptor<ChatRequest, ChatResponse>("/sortedchat.SortedChat/Chat", grpc_web_1.MethodType.SERVER_STREAMING, ChatRequest, ChatResponse, (message: ChatRequest) => message.serialize(), ChatResponse.deserialize);
    Chat(message: ChatRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/sortedchat.SortedChat/Chat", message, metadata || {}, SortedChatClient.Chat);
    }
    private static GetHistory = new grpc_web_1.MethodDescriptor<GetHistoryRequest, GetHistoryResponse>("/sortedchat.SortedChat/GetHistory", grpc_web_1.MethodType.UNARY, GetHistoryRequest, GetHistoryResponse, (message: GetHistoryRequest) => message.serialize(), GetHistoryResponse.deserialize);
    GetHistory(message: GetHistoryRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetHistoryRequest, GetHistoryResponse>(this._address + "/sortedchat.SortedChat/GetHistory", message, metadata || {}, SortedChatClient.GetHistory);
    }
    private static GetChatList = new grpc_web_1.MethodDescriptor<GetChatListRequest, GetChatListResponse>("/sortedchat.SortedChat/GetChatList", grpc_web_1.MethodType.UNARY, GetChatListRequest, GetChatListResponse, (message: GetChatListRequest) => message.serialize(), GetChatListResponse.deserialize);
    GetChatList(message: GetChatListRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<GetChatListRequest, GetChatListResponse>(this._address + "/sortedchat.SortedChat/GetChatList", message, metadata || {}, SortedChatClient.GetChatList);
    }
    private static CreateChat = new grpc_web_1.MethodDescriptor<CreateChatRequest, CreateChatResponse>("/sortedchat.SortedChat/CreateChat", grpc_web_1.MethodType.UNARY, CreateChatRequest, CreateChatResponse, (message: CreateChatRequest) => message.serialize(), CreateChatResponse.deserialize);
    CreateChat(message: CreateChatRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<CreateChatRequest, CreateChatResponse>(this._address + "/sortedchat.SortedChat/CreateChat", message, metadata || {}, SortedChatClient.CreateChat);
    }
    private static ListModel = new grpc_web_1.MethodDescriptor<ListModelsRequest, ListModelsResponse>("/sortedchat.SortedChat/ListModel", grpc_web_1.MethodType.UNARY, ListModelsRequest, ListModelsResponse, (message: ListModelsRequest) => message.serialize(), ListModelsResponse.deserialize);
    ListModel(message: ListModelsRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<ListModelsRequest, ListModelsResponse>(this._address + "/sortedchat.SortedChat/ListModel", message, metadata || {}, SortedChatClient.ListModel);
    }
    private static SearchChat = new grpc_web_1.MethodDescriptor<ChatSearchRequest, ChatSearchResponse>("/sortedchat.SortedChat/SearchChat", grpc_web_1.MethodType.UNARY, ChatSearchRequest, ChatSearchResponse, (message: ChatSearchRequest) => message.serialize(), ChatSearchResponse.deserialize);
    SearchChat(message: ChatSearchRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.thenableCall<ChatSearchRequest, ChatSearchResponse>(this._address + "/sortedchat.SortedChat/SearchChat", message, metadata || {}, SortedChatClient.SearchChat);
    }
}
