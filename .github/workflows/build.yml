name: Build UI and Go App

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-[a-zA-Z0-9]+'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install frontend dependencies
        working-directory: frontend
        run: pnpm install

      - name: Build frontend in standalone mode
        working-directory: frontend
        run: pnpm run build --mode standalone

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/client
          if-no-files-found: error
          retention-days: 10

  build-go:
    needs: build
    runs-on: ${{ matrix.runner }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            runner: ubuntu-latest
          - os: linux
            arch: arm64
            runner: ubuntu-latest
          - os: windows
            arch: amd64
            runner: ubuntu-latest
          - os: darwin
            arch: arm64
            runner: macos-latest
          - os: darwin
            arch: amd64
            runner: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: backend/mono/public

      - name: Ensure public directory exists
        run: mkdir -p backend/mono/public

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install MinGW-w64 for Windows cross-compilation
        if: matrix.os == 'windows'
        run: sudo apt-get update && sudo apt-get install -y mingw-w64

      - name: Install cross-compiler for Linux ARM64
        if: matrix.os == 'linux' && matrix.arch == 'arm64'
        run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.3'

      - name: Build Go backend
        working-directory: backend
        run: |
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          export CGO_ENABLED=1

          # Windows
          export OUT=sortedchat-${{ matrix.os }}-${{ matrix.arch }}
          if [ "${{ matrix.os }}" = "windows" ]; then 
            export OUT="$OUT.exe";
            export CC=x86_64-w64-mingw32-gcc
          fi

          # Linux ARM64
          if [ "${{ matrix.os }}" = "linux" ] && [ "${{ matrix.arch }}" = "arm64" ]; then 
            export CC=aarch64-linux-gnu-gcc
          fi

          # macOS builds don't need special CC settings
          if [ "${{ matrix.os }}" = "darwin" ]; then
            export CGO_ENABLED=1
          fi

          go env
          go build -o $OUT ./mono

      - name: Upload Go executable as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sortedchat-${{ matrix.os }}-${{ matrix.arch }}
          path: backend/sortedchat-${{ matrix.os }}-${{ matrix.arch }}*
          retention-days: 10
  create-release:
    needs: build-go
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if pre-release
        id: check_prerelease
        run: |
          tag=${GITHUB_REF#refs/tags/}
          if [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: artifacts/sortedchat-*/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

